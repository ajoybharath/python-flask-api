We are going to build & test Python web api service with Jenkins 

You can clone the repository below

https://github.com/ajoybharath/python-flask-api.git

This is a pipeline using Jenkinsfile 

    1. build a small HelloWorld API with Flask
    2. create some xUnit style unit tests for the service
    3. how to integrate this into Jenkins with JUnit test reporting support

The API is a simple Hello World web application with essentially three routes: / , /hello/, and /hello/<name>, where name is any name you desire.

Its better to use something like VirtualEnv to keep pip packages installed for this project separate from system packages or else you can use a python container to build & test your use cases.

After installing Python and optionally initializing a virtual environment, we will need to install the Flask web-microframework as well as the WSGI (Web Service Gateway Interface) server Werkzeug. We can do this by creating a package manifest called requirements.txt and then installing the packages with pip using these bash commands:

You can try the server out with python app.py or with:

# make script executable & run service
chmod +x app.py
./app.py &

# test the server 
curl -i localhost:5000/
curl -i localhost:5000/hello/
curl -i localhost:5000/hello/Ajoy

As we tested the application with three routes: / , /hello/, and /hello/Ajoy

Now we can write some tests to test these routes.
Create the Tests

Run this in bash to create our test cases:

To run the tests, we simply run something like:

./test.py


We use blue-ocean jenkins in docker to run this pipeline

You can use the terraform codes in repository demo_cicd branch demo_cicd_tf to start another instance

Jenkins has the ability present test results in a graphical visual way, as long as you can output the results in a JUnit format. JUnit is a popular xUnit type of test framework, and JUnit output format (an XML file) is ubiquitous test reporting. Essentially, any CI (Continuous Integration) solution will support this format, including Jenkins.

For this integration, we can use the XMLRunner library, and pass this as our test runner to the unittest.main() method.

Insert these few lines at the bottom of the script app.py so that it looks like this:

if __name__ == '__main__':
    ############# Add these lines #############
    import xmlrunner
    runner = xmlrunner.XMLTestRunner(output='test-reports')
    unittest.main(testRunner=runner)
    ###########################################
    unittest.main()

This will import a library called xmlrunner and do a unittest.main() run with XMLTestRunner. After, will do another run to show output to the standard output. This will generate test reports in the test-reports directory.

We need to update the Jenkinsfile to have a final post step in the test stage, that tells Jenkins where to find the JUnit test report. Update Jenkinsfile to look like this:

    stage('test') {
      steps {
        sh 'python test.py'
      }
      post {
        always {
          junit 'test-reports/*.xml'
        }


In Jenkins, run this pipeline.